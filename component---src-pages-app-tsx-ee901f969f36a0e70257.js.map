{"version":3,"sources":["webpack:///./src/components/Logo/Logo.tsx","webpack:///./src/components/Logo/index.ts","webpack:///./src/assets/images/Reality_Capture_white_logo_365x110_transparent_background.png","webpack:///./src/pages/App.tsx","webpack:///./src/components/Navbar/NavbarListElement/index.ts","webpack:///./src/components/Navbar/NavbarListElement/NavbarListElement.tsx","webpack:///./src/components/Navbar/Navbar.tsx","webpack:///./src/components/Navbar/index.ts"],"names":["Logo","src","logoPicture","alt","className","styles","module","exports","App","NavbarListElement","props","listElementName","Navbar","toggleOpen","e","preventDefault","setState","openMenu","state","isDesktop","desktopScreenVersion","windowWidth","render","this","console","log","NavList","NavbarMobile","MenuBurgerContainer","MenuBurger","role","onClick","ellipsis_open","ellipsis","NavListMobileOpen","NavListMobileClosed","React","Component"],"mappings":"gKAeeA,EARF,WACX,OACE,oCACE,yBAAKC,IAAKC,IAAaC,IAAI,OAAOC,UAAWC,IAAOL,SCR3CA,O,uBCFfM,EAAOC,QAAU,IAA0B,yG,kCCA3C,4CAeeC,UARO,WACpB,OACE,6BACE,kBAAC,IAAD,S,4FCRSC,ECQW,SAACC,GAAiB,IAClCC,EAAoBD,EAApBC,gBACR,OACE,oCACE,wBAAIP,UAAWC,IAAOI,mBAAoBE,K,yBCiJjCC,E,oBA3Ib,WAAYF,GAAoB,aAC9B,cAAMA,IAAN,MAuEFG,WAAa,SAAAC,GACXA,EAAEC,iBACF,EAAKC,SAAS,CAAEC,UAAW,EAAKC,MAAMD,YAvEtC,EAAKC,MAAQ,CACXD,UAAU,EACVE,UAAW,EAAKT,MAAMU,qBACtBC,YAAa,GANe,E,0GA6EhCC,OAAA,WAAS,MACsCC,KAAKL,MAA1CD,EADD,EACCA,SAAUE,EADX,EACWA,UAAWE,EADtB,EACsBA,YACrBD,EAAyBG,KAAKb,MAA9BU,qBAMR,OAJAI,QAAQC,IAAI,uDAAwDF,KAAKb,MAAMU,sBAC/EI,QAAQC,IAAI,sCAAuCJ,GACnDG,QAAQC,IAAI,8BAA+BN,GAEvCC,EAGA,yBAAKhB,UAAWC,IAAOO,QACrB,yBAAKR,UAAWC,IAAOL,MACrB,kBAACA,EAAA,EAAD,OAEF,wBAAII,UAAWC,IAAOqB,SACpB,kBAAC,EAAD,CAAmBf,gBAAgB,SACnC,kBAAC,EAAD,CAAmBA,gBAAgB,oBACnC,kBAAC,EAAD,CAAmBA,gBAAgB,gBACnC,kBAAC,EAAD,CAAmBA,gBAAgB,SACnC,kBAAC,EAAD,CAAmBA,gBAAgB,cACnC,kBAAC,EAAD,CAAmBA,gBAAgB,eAOzC,yBAAKP,UAAWC,IAAOO,QACrB,yBAAKR,UAAWC,IAAOsB,cACrB,yBAAKvB,UAAWC,IAAOuB,qBACrB,yBAAKxB,UAAWC,IAAOL,MACrB,kBAACA,EAAA,EAAD,OAEF,yBACEI,UAAWC,IAAOwB,WAClBC,KAAK,SACLC,QAASR,KAAKV,YAEd,0BACET,UAAWa,EAAWZ,IAAO2B,cAAgB3B,IAAO4B,aAI1D,wBACE7B,UACEa,EAAWZ,IAAO6B,kBAAoB7B,IAAO8B,qBAG/C,kBAAC,EAAD,CAAmBxB,gBAAgB,SACnC,kBAAC,EAAD,CAAmBA,gBAAgB,oBACnC,kBAAC,EAAD,CAAmBA,gBAAgB,gBACnC,kBAAC,EAAD,CAAmBA,gBAAgB,SACnC,kBAAC,EAAD,CAAmBA,gBAAgB,cACnC,kBAAC,EAAD,CAAmBA,gBAAgB,iB,GApI1ByB,IAAMC,WCjBZzB","file":"component---src-pages-app-tsx-ee901f969f36a0e70257.js","sourcesContent":["// global dependencies\nimport React from 'react';\n\n// local dependencies\nimport logoPicture from '../../assets/images/Reality_Capture_white_logo_365x110_transparent_background.png';\nimport styles from './Logo.module.scss';\n\nconst Logo = () => {\n  return (\n    <>\n      <img src={logoPicture} alt=\"Logo\" className={styles.Logo} />\n    </>\n  );\n};\n\nexport default Logo;\n","import Logo from './Logo';\n\nexport default Logo;\n","module.exports = __webpack_public_path__ + \"static/Reality_Capture_white_logo_365x110_transparent_background-2560030cad04774e9ba2316ee6d57064.png\";","// global dependencies\nimport React from 'react';\n\n// local dependencies\nimport Navbar from 'components/Navbar';\nimport styles from './Index.module.scss';\n\nconst App: React.FC = () => {\n  return (\n    <div>\n      <Navbar />\n    </div>\n  );\n};\n\nexport default App;\n","import NavbarListElement from './NavbarListElement';\n\nexport default NavbarListElement;\n","// global dependencies\r\nimport React from 'react';\r\n\r\n// local dependencies\r\nimport styles from './NavbarListElement.module.scss';\r\n\r\ninterface Props {\r\n  listElementName: string;\r\n}\r\n\r\nconst NavbarListElement = (props: Props) => {\r\n  const { listElementName } = props;\r\n  return (\r\n    <>\r\n      <li className={styles.NavbarListElement}>{listElementName}</li>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NavbarListElement;\r\n","// global dependencies\nimport React from 'react';\nimport throttle from 'lodash.throttle';\n\n// local dependencies\nimport Logo from '../Logo';\nimport NavbarListElement from './NavbarListElement';\nimport styles from './Navbar.module.scss';\n\ninterface NavbarProps {\n  desktopScreenVersion: boolean;\n}\n\ninterface NavbarState {\n  openMenu: boolean;\n  isDesktop: boolean;\n  windowWidth: number;\n}\n\nclass Navbar extends React.Component<NavbarProps, NavbarState> {\n  constructor(props: NavbarProps) {\n    super(props);\n\n    this.state = {\n      openMenu: false,\n      isDesktop: this.props.desktopScreenVersion,\n      windowWidth: 0,\n    };\n  }\n\n  /*UNSAFE_componentWillMount(): void {\n    this.setState({ isDesktop: this.props.desktopScreenVersion });\n  }\n\n  componentDidMount = () => {\n    console.log(\"BEGINING componentDidMount state.windowWidth in NAVBAR \"+ this.state.windowWidth);\n    this.setState({ windowWidth: window.innerWidth });\n    this.onResize();\n    window.addEventListener('resize', this.onResize);\n\n    console.log(\"componentDidMount window.innerWidth in NAVBAR \"+ window.innerWidth);\n    console.log(\"componentDidMount state.isDekstop in NAVBAR \"+ this.state.isDesktop);\n    console.log(\"componentDidMount state.windowWidth in NAVBAR \"+ this.state.windowWidth);\n  };\n\n  componentWillUnmount = () => {\n    window.removeEventListener('resize', this.onResize);\n  };\n\n  onResize = () => {\n    //this.setState({ windowWidth: window.innerWidth });\n    if (!(this.state.windowWidth >= 769)) {\n      this.setState({ isDesktop: false });\n    } else {\n      this.setState({ isDesktop: true });\n    }\n  };*/\n/*\n  UNSAFE_componentWillMount(): void {\n    this.setState({ windowWidth: window.innerWidth });\n    //this.onResize();\n    // console.log(\"componentWillMount window.innerWidth: \"+ this.state.windowWidth)\n    // console.log(\"componentWillMount STATE windowWidth: \"+ this.state.windowWidth)\n    // console.log(\"componentWillMount STATE isDesktop: \"+ this.state.isDesktop)\n  }\n\n  componentDidMount = () => {\n    this.setState({ windowWidth: window.innerWidth });\n    //this.onResize();\n    // console.log(\"componentDidMount windowWidth: \"+ this.state.windowWidth)\n\n    window.addEventListener('resize', () => {\n      console.log('this.onResize was in index.js (componentDidMount) was triggered');\n      if (!(window.innerWidth >= 769)) {\n        this.setState({ isDesktop: false });\n      } else {\n        this.setState({ isDesktop: true });\n      }\n    });\n  };\n\n  componentWillUnmount = () => {\n    window.removeEventListener('resize', () => {\n      console.log('this.onResize was in index.js (componentWillUnMount) was triggered');\n      if (!(window.innerWidth >= 769)) {\n        this.setState({ isDesktop: false });\n      } else {\n        this.setState({ isDesktop: true });\n      }\n    });\n  };*/\n\n  toggleOpen = e => {\n    e.preventDefault();\n    this.setState({ openMenu: !this.state.openMenu });\n  };\n\n  render() {\n    const { openMenu, isDesktop, windowWidth } = this.state;\n    const { desktopScreenVersion } = this.props;\n\n    console.log(\"desktopScreenVersion from index.js in render NAVBAR \"+ this.props.desktopScreenVersion);\n    console.log(\"state.windowWidth in render NAVBAR \"+ windowWidth);\n    console.log(\"isDekstop in render NAVBAR \"+ isDesktop);\n\n    if (desktopScreenVersion) {\n      return (\n        // desktop\n        <div className={styles.Navbar}>\n          <div className={styles.Logo}>\n            <Logo />\n          </div>\n          <ul className={styles.NavList}>\n            <NavbarListElement listElementName=\"Home\" />\n            <NavbarListElement listElementName=\"Reality Capture\" />\n            <NavbarListElement listElementName=\"Scan-to-BIM\" />\n            <NavbarListElement listElementName=\"Blog\" />\n            <NavbarListElement listElementName=\"Tutorials\" />\n            <NavbarListElement listElementName=\"About me\" />\n          </ul>\n        </div>\n      );\n    }\n    return (\n      // mobile\n      <div className={styles.Navbar}>\n        <div className={styles.NavbarMobile}>\n          <div className={styles.MenuBurgerContainer}>\n            <div className={styles.Logo}>\n              <Logo />\n            </div>\n            <div\n              className={styles.MenuBurger}\n              role=\"button\"\n              onClick={this.toggleOpen}\n            >\n              <span\n                className={openMenu ? styles.ellipsis_open : styles.ellipsis}\n              />\n            </div>\n          </div>\n          <ul\n            className={\n              openMenu ? styles.NavListMobileOpen : styles.NavListMobileClosed\n            }\n          >\n            <NavbarListElement listElementName=\"Home\" />\n            <NavbarListElement listElementName=\"Reality Capture\" />\n            <NavbarListElement listElementName=\"Scan-to-BIM\" />\n            <NavbarListElement listElementName=\"Blog\" />\n            <NavbarListElement listElementName=\"Tutorials\" />\n            <NavbarListElement listElementName=\"About me\" />\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Navbar;\n","import Navbar from './Navbar';\n\nexport default Navbar;\n"],"sourceRoot":""}