{"version":3,"sources":["webpack:///./src/components/ScrollIndicator/ScrollIndicator.tsx","webpack:///./src/pages/blogPost.tsx","webpack:///./src/pages/blogPost.module.scss","webpack:///./src/components/ScrollIndicator/ScrollIndicator.module.scss"],"names":["ScrollIndicator","props","scrollProgress","scrolled","document","documentElement","scrollTop","scrollHeight","clientHeight","setState","scroll","state","componentDidMount","window","addEventListener","this","componentWillUnmount","removeEventListener","render","className","styles","progressContainerStyle","progressBarStyle","style","width","React","Component","PostsPage","data","useState","rssData","setRssData","undefined","feedMediumBlog","categories","content","pubDate","guid","id","link","title","useEffect","Axios","get","then","axiosData","imageUrl","axiosTitle","items","map","singleItem","index","thumbnail","replace","slice","catch","e","console","error","description","encodedSnippet","substring","pathname","image","sectionContainer","postContentContainer","firstPublicationDate","moment","format","hashtags","hashtag","key","singleHashtag","dangerouslySetInnerHTML","__html","encoded","module","exports"],"mappings":"qPAgDeA,E,YArCb,WAAYC,GAAY,aACtB,cAAMA,IAAN,MAcFC,eAAiB,WACf,IAIMC,EAJWC,SAASC,gBAAgBC,WAExCF,SAASC,gBAAgBE,aACzBH,SAASC,gBAAgBG,cACiB,IAC5C,EAAKC,SAAS,CAAEC,OAAQP,KAnBxB,EAAKQ,MAAQ,CACXD,OAAQ,GAHY,E,4CAOxBE,kBAAA,WACEC,OAAOC,iBAAiB,SAAUC,KAAKb,iB,EAGzCc,qBAAA,WACEH,OAAOI,oBAAoB,SAAUF,KAAKb,iB,EAY5CgB,OAAA,WAAS,IACCR,EAAWK,KAAKJ,MAAhBD,OACR,OACE,yBAAKS,UAAWC,IAAOC,wBACrB,yBACEF,UAAWC,IAAOE,iBAClBC,MAAO,CAAEC,MAAUd,EAAL,S,GA/BMe,IAAMC,WCoGrBC,UA7FkB,SAAC,GAAa,IAAXC,EAAW,EAAXA,KAAW,EACfC,mBAAS,IAAhCC,EADsC,KAC7BC,EAD6B,KAG7C,QAAaC,IAATJ,EAAoB,OASlBA,EAAKK,eAPPC,EAFoB,EAEpBA,WACAC,EAHoB,EAGpBA,QAIAC,GAPoB,EAIpBC,KAJoB,EAKpBC,GALoB,EAMpBC,KANoB,EAOpBH,SACAI,EARoB,EAQpBA,MA0CF,OAVAC,qBAAU,WAvBRC,IAAMC,IAHN,mFAIGC,MAAK,SAAAC,GACJ,IAAIC,EACAC,EACJF,EAAUjB,KAAKoB,MAAMC,KAAI,SAACC,EAAYC,GAChCD,EAAWV,QAAUA,IACvBM,EAAWI,EAAWE,UAIO,OAH7BL,EAAaG,EAAWV,MACrBa,QAAQ,iCAAkC,KAC1CA,QAAQ,QAAS,KACLC,OAAO,KACpBP,EAAaA,EAAWO,MAAM,GAAI,IAGpCvB,EAAW,CAACe,EAAUC,WAI3BQ,OAAM,SAAAC,GACLC,QAAQC,MAAMF,QAMjB,IASD,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEhB,MAAOA,EACPmB,YAAaxB,EAAQyB,eAAeC,UAAU,EAAG,KACjDC,SAAUhC,EAAQ,GAClBiC,MAAOjC,EAAQ,KAEjB,kBAAC,EAAD,MACA,6BAASX,UAAWC,IAAO4C,kBACzB,yBAAK7C,UAAWC,IAAO6C,sBACrB,4BAAKzB,GACL,yBAAKrB,UAAWC,IAAO8C,sBACpBC,IAAO/B,GAASgC,OAAO,iBAE1B,wBAAIjD,UAAWC,IAAOiD,UACnBnC,EAAWe,KAAI,SAACqB,EAASnB,GACxB,OACE,wBAAIoB,IAAKpB,EAAOhC,UAAWC,IAAOoD,eAAlC,IACIF,QAMZ,yBACEnD,UAAWC,IAAOe,QAClBsC,wBAAyB,CAAEC,OAAQvC,EAAQwC,aAUrD,OAAO,O,qBC1GTC,EAAOC,QAAU,CAAC,gBAAkB,0CAA0C,iBAAmB,2CAA2C,kBAAoB,4CAA4C,UAAY,oCAAoC,WAAa,qCAAqC,qBAAuB,+CAA+C,qBAAuB,+CAA+C,SAAW,mCAAmC,cAAgB,wCAAwC,eAAiB,yCAAyC,QAAU,oC,uBCApmBD,EAAOC,QAAU,CAAC,uBAAyB,wDAAwD,iBAAmB","file":"component---src-pages-blog-post-tsx-5c993f2bc79b671891ac.js","sourcesContent":["// global dependencies\nimport React from 'react';\n\n// local dependencies\nimport styles from './ScrollIndicator.module.scss';\n\ninterface ScrollIndicatorState {\n  scroll: number;\n}\n\nclass ScrollIndicator extends React.Component<any, ScrollIndicatorState> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      scroll: 0,\n    };\n  }\n\n  componentDidMount() {\n    window.addEventListener('scroll', this.scrollProgress);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('scroll', this.scrollProgress);\n  }\n\n  scrollProgress = () => {\n    const scrollPx = document.documentElement.scrollTop;\n    const winHeightPx =\n      document.documentElement.scrollHeight -\n      document.documentElement.clientHeight;\n    const scrolled = (scrollPx / winHeightPx) * 100;\n    this.setState({ scroll: scrolled });\n  };\n\n  render() {\n    const { scroll } = this.state;\n    return (\n      <div className={styles.progressContainerStyle}>\n        <div\n          className={styles.progressBarStyle}\n          style={{ width: `${scroll}%` }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default ScrollIndicator;\n","import React, { useEffect, useState } from 'react';\nimport Axios from 'axios';\nimport { graphql, Link } from 'gatsby';\n\nimport moment from 'moment';\nimport SEO from '../components/seo';\nimport Layout from '../components/gatsby_elements/layout';\nimport styles from './blogPost.module.scss';\nimport BannerWithCaption from '../components/blog_post_elements/BannerWithCaption';\nimport Embed from '../components/blog_post_elements/Embed';\nimport RichText from '../components/blog_post_elements/RichText';\n// import SimpleQuote from '../components/blog_post_elements/SimpleQuote';\n// import PictRightColumn from '../components/blog_post_elements/PictRightColumn';\n// import PictLeftColumn from '../components/blog_post_elements/PictLeftColumn';\nimport ListOfArticles from '../components/blog_post_elements/ListOfArticles';\nimport ScrollIndicator from '../components/ScrollIndicator/ScrollIndicator';\n\nconst PostsPage: React.FC<any> = ({ data }) => {\n  const [rssData, setRssData] = useState([]);\n\n  if (data !== undefined) {\n    const {\n      categories,\n      content,\n      guid,\n      id,\n      link,\n      pubDate,\n      title,\n    } = data.feedMediumBlog;\n\n    // console.log('data.feedMediumBlog: ', data.feedMediumBlog);\n\n    const mediumURL =\n      'https://api.rss2json.com/v1/api.json?rss_url=https://medium.com/feed/@3d-points';\n\n    const fetchRssData = () => {\n      Axios.get(mediumURL)\n        .then(axiosData => {\n          let imageUrl;\n          let axiosTitle;\n          axiosData.data.items.map((singleItem, index) => {\n            if (singleItem.title === title) {\n              imageUrl = singleItem.thumbnail;\n              axiosTitle = singleItem.title\n                .replace(/[.,'\"/!$%^&*;:{}=\\-_`~()?\\s+]/g, '-')\n                .replace(/[#â€™]/g, '');\n              if (axiosTitle.slice(-1) === '-') {\n                axiosTitle = axiosTitle.slice(0, -1);\n              }\n              // console.log('thumbnail ',imageUrl)\n              setRssData([imageUrl, axiosTitle]);\n            }\n          });\n        })\n        .catch(e => {\n          console.error(e);\n        });\n    };\n\n    useEffect(() => {\n      fetchRssData();\n    }, []);\n\n    // console.log('RssData from axios: ', rssData);\n    // console.log('Pochodzi z PROPS: ', title);\n    // console.log('Pochodzi z rss: ', rssData[1]);\n\n    // const imageUrl = rssData[1] === title ? rssData[0] : null;\n\n    return (\n      <Layout>\n        <SEO\n          title={title}\n          description={content.encodedSnippet.substring(0, 150)}\n          pathname={rssData[1]}\n          image={rssData[0]}\n        />\n        <ScrollIndicator />\n        <section className={styles.sectionContainer}>\n          <div className={styles.postContentContainer}>\n            <h1>{title}</h1>\n            <div className={styles.firstPublicationDate}>\n              {moment(pubDate).format('MMM DD, YYYY')}\n            </div>\n            <ul className={styles.hashtags}>\n              {categories.map((hashtag, index) => {\n                return (\n                  <li key={index} className={styles.singleHashtag}>\n                    #{hashtag}\n                  </li>\n                );\n              })}\n            </ul>\n          </div>\n          <div\n            className={styles.content}\n            dangerouslySetInnerHTML={{ __html: content.encoded }}\n          />\n          {/* </section> */}\n          {/* <section className={styles.sectionContainer2}> */}\n          {/*  <p className={styles.firstParagraph}>{firstParagraph}</p> */}\n          {/*  {sliceTypes} */}\n        </section>\n      </Layout>\n    );\n  }\n  return null;\n};\n\nexport default PostsPage;\n\nexport const blogPostQuery = graphql`\n  query PostById($id: String!) {\n    # Query the post with the id passed in from gatsby-node.js\n    feedMediumBlog(id: { eq: $id }) {\n      categories\n      content {\n        encoded\n        encodedSnippet\n      }\n      guid\n      id\n      link\n      pubDate\n      title\n    }\n  }\n`;\n\n// This is code for a data from Prismistyles.io\n\n/* const PostsPage: React.FC<any> = ({ data }) => {\n  // console.table(`DATA in PostPage: ${JSON.stringify(data)}`);\n  if (data !== undefined) {\n    const {\n      data: postData,\n      first_publication_date: firstPublicationDate,\n      url,\n    } = data.prismicPosts;\n    const { body } = data.prismicPosts.data;\n    const articlesData = data.allPrismicPosts.edges;\n    // console.log(`data.allPrismicPosts  : ${JSON.stringify(articlesData)}`);\n\n    // variables from prismicPosts\n    const title = postData.title[0].text;\n    // if (postData.subtitle[0].text !== undefined)\n    const subtitle =\n      postData.subtitle[0] === undefined ? '' : postData.subtitle[0].text;\n    const hashtagsArray = postData.hashtags ? postData.hashtags.split(',') : [];\n    const firstParagraph =\n      postData.text_of_the_post[0] === undefined\n        ? ''\n        : postData.text_of_the_post[0].text;\n    const image = postData.main_image;\n    const readTime = postData.read_time[0].text;\n\n    // variables from data.prismicPosts.data.body\n    const sliceTypes = body.map((sliceType: any, index: string) => {\n      switch (sliceType.slice_type) {\n        case 'banner_with_caption':\n          return (\n            <BannerWithCaption detailsData={sliceType.primary.image_banner} />\n          );\n        case 'embed':\n          return <Embed detailsData={sliceType.primary.link_to_iframe} />;\n        case 'text':\n          return <RichText detailsData={sliceType.primary.rich_text_in_post} />;\n        // case 'quote':\n        //   return <SimpleQuote detailsData={sliceType.primary.quote} />;\n        // case 'pictright_text_columns':\n        //   return <PictRightColumn detailsData={sliceType} />;\n        // case 'pictleft_text_columns':\n        //   return <PictLeftColumn detailsData={sliceType} />;\n        case 'list_of_articles':\n          return (\n            <ListOfArticles\n              detailsData={sliceType}\n              articlesData={articlesData}\n            />\n          );\n        default:\n          // console.table(`this is slicetype: ${JSON.stringify(sliceType)}`);\n      }\n      return null;\n    });\n    console.log('URL for Pathname: ', url);\n\n    return (\n      <Layout>\n        <SEO\n          title={title}\n          description={subtitle}\n          pathname={url}\n          image={image.url}\n        />\n        <ScrollIndicator />\n        <section className={styles.sectionContainer}>\n          <img className={styles.mainImage} src={image.url} alt={image.alt} />\n          <figcaption className={styles.figcaption}>\n            Fot. {image.copyright}\n          </figcaption>\n          <div className={styles.postContentContainer}>\n            <h1>{title}</h1>\n            <h3>{subtitle}</h3>\n            <div>{readTime}</div>\n            <div className={styles.firstPublicationDate}>\n              {firstPublicationDate}\n            </div>\n            <ul className={styles.hashtags}>\n              {hashtagsArray.map((hashtag: string, index: string) => (\n                <li className={styles.singleHashtag} key={index}>\n                  {hashtag}\n                </li>\n              ))}\n            </ul>\n          </div>\n        </section>\n        <section className={styles.sectionContainer2}>\n          <p className={styles.firstParagraph}>{firstParagraph}</p>\n          {sliceTypes}\n        </section>\n      </Layout>\n    );\n  }\n  return null;\n};\n\nexport default PostsPage;\n\nexport const blogPostQuery = graphql`\n  query PostBySlug($uid: String!) {\n    # Query the post with the uid passed in from gatsby-node.js\n    prismicPosts(uid: { eq: $uid }) {\n      url\n      uid\n      first_publication_date(formatString: \"DD MMMM YYYY\")\n      data {\n        title {\n          text\n        }\n        text_of_the_post {\n          text\n        }\n        read_time {\n          text\n        }\n        main_image {\n          alt\n          url\n          copyright\n        }\n        hashtags\n        subtitle {\n          text\n        }\n        body {\n          slice_type\n          primary {\n            rich_text_in_post {\n              text\n              type\n            }\n            link_to_iframe {\n              text\n            }\n            list_of_articles {\n              text\n            }\n            image_banner {\n              alt\n              url\n              copyright\n            }\n          }\n          items {\n            articles_to_link {\n              uid\n            }\n          }\n        }\n      }\n    }\n    allPrismicPosts {\n      edges {\n        node {\n          uid\n          data {\n            title {\n              text\n            }\n            main_image {\n              url\n              alt\n              copyright\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\n// This is the code when uses RSS api RSS2JSON\n\nexport class SingleBlog extends React.Component<any, any> {\n  constructor(props) {\n    super(props);\n    console.log('singleBlog data from RSS: ', { data});\n    this.state = {\n      mediumURL:\n        'https://api.rss2json.com/v1/api.json?rss_url=https://medium.com/feed/@3d-points',\n      singlePost: {},\n      titleId: props.location.state.item.guid,\n      avatar: '',\n      profileLink: '',\n      error: null,\n      isLoading: true,\n    };\n  }\n\n  componentDidMount() {\n    console.log('blogPost props', this.props);\n    console.log('blogPost props', this.props.location.state);\n    const { mediumURL } = this.state;\n    Axios.get(mediumURL)\n\n      .then(data => {\n        const avatar = data.data.feed.image;\n        const profileLink = data.data.feed.link;\n        const res = data.data.items;\n        const posts = res.filter(item => item.categories.length > 0);\n        for (const i in posts) {\n          const title = `${posts[i].guid}`;\n          if (title === this.state.titleId) {\n            const post = posts[i];\n\n            this.setState(p => ({\n              singlePost: post,\n              avatar,\n              profileLink,\n              isLoading: false,\n            }));\n          }\n        }\n      })\n      .catch(e => {\n        this.setState({ error: e.toJSON() });\n        console.log(e);\n      });\n  }\n\n  render() {\n    console.log('RENDER in blogPost: ', this.state);\n    console.log('Cetegories in blogPost: ', this.state.singlePost.categories);\n    console.log(\n      'Cetegories type in blogPost: ',\n      typeof this.state.singlePost.categories\n    );\n    const { singlePost } = this.state;\n\n    const categories = () => {\n      const categoriesArray = [];\n      for (const i in singlePost.categories) {\n        categoriesArray.push(singlePost.categories[i]);\n      }\n      return categoriesArray;\n    };\n\n    let post;\n    if (singlePost) {\n      post = (\n        <>\n          { <img }\n{  className={styles.mainImage} }\n{  src={singlePost.thumbnail} }\n{  alt=\"main_image\" }\n{ />}\n<div className={styles.postContentContainer}>\n            <h1>{singlePost.title}</h1>\n            <div className={styles.firstPublicationDate}>\n              {moment(singlePost.pubDate).format('MMM DD, YYYY')}\n            </div>\n            <ul className={styles.hashtags}>\n              {categories().map((post, index) => {\n                return <li className={styles.singleHashtag}>#{post}</li>;\n              })}\n            </ul>\n          </div>\n<div\n  className={styles.content}\n  dangerouslySetInnerHTML={{ __html: singlePost.content }}\n/>\n</>\n);\n}\nif (this.state.isLoading) {\n  post = <div> Loading... </div>;\n}\nif (this.state.error) {\n  const error = this.state.error.code\n    ? this.state.error.code\n    : this.state.error.name;\n  const errorMsg = this.state.error.message;\n  post = (\n    <>\n          <h2 className=\"red center1\">{error}</h2>\n          <p className=\"errorMessage center1\">{errorMsg}</p>\n        </>\n  );\n}\n\nreturn (\n  <Layout>\n        <SEO\n          title={singlePost.title}\n          description={singlePost.title}\n          pathname=\"url\" // TODO\n          image={singlePost.thumbnail}\n        />\n        <ScrollIndicator />\n        <section className={styles.sectionContainer}>{post}</section>\n      </Layout>\n);\n}\n}\n\nexport default SingleBlog;\n*/\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"scrollIndicator\":\"blogPost-module--scrollIndicator--2ECt8\",\"sectionContainer\":\"blogPost-module--sectionContainer--yYU1d\",\"sectionContainer2\":\"blogPost-module--sectionContainer2--2A1V8\",\"mainImage\":\"blogPost-module--mainImage--2E70_\",\"figcaption\":\"blogPost-module--figcaption--1z8Bs\",\"postContentContainer\":\"blogPost-module--postContentContainer--24ynX\",\"firstPublicationDate\":\"blogPost-module--firstPublicationDate--1xwry\",\"hashtags\":\"blogPost-module--hashtags--3T_0Y\",\"singleHashtag\":\"blogPost-module--singleHashtag--1nq68\",\"firstParagraph\":\"blogPost-module--firstParagraph--23FXQ\",\"content\":\"blogPost-module--content--2Eg6x\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"progressContainerStyle\":\"ScrollIndicator-module--progressContainerStyle--2Az_G\",\"progressBarStyle\":\"ScrollIndicator-module--progressBarStyle--32qlQ\"};"],"sourceRoot":""}